// Unsupported functionality: This file is not supported by the current version of the application.
    private string ParsePluginText(string sText, string sWindow)
    {
        if (m_oGlobals.PluginsEnabled == false)
            return sText;
        foreach (object oPlugin in m_oGlobals.PluginList)
        {
            if(oPlugin is GeniePlugin.Interfaces.IPlugin)
            {
                if ((oPlugin as GeniePlugin.Interfaces.IPlugin).Enabled)
                {
                    try
                    {
                        sText = (oPlugin as GeniePlugin.Interfaces.IPlugin).ParseText(sText, sWindow);
                    }
                    /* TODO ERROR: Skipped IfDirectiveTrivia */
                    catch (Exception ex)
                    {
                        GenieError.GeniePluginError((oPlugin as GeniePlugin.Interfaces.IPlugin), "ParseText", ex);
                        (oPlugin as GeniePlugin.Interfaces.IPlugin).Enabled = false;
                        /* TODO ERROR: Skipped ElseDirectiveTrivia *//* TODO ERROR: Skipped DisabledTextTrivia *//* TODO ERROR: Skipped EndIfDirectiveTrivia */
                    }
                }
            }
            else if(oPlugin is GeniePlugin.Plugins.IPlugin)
            {
                if ((oPlugin as GeniePlugin.Plugins.IPlugin).Enabled)
                {
                    try
                    {
                        sText = (oPlugin as GeniePlugin.Plugins.IPlugin).ParseText(sText, sWindow);
                    }
                    /* TODO ERROR: Skipped IfDirectiveTrivia */
                    catch (Exception ex)
                    {
                        GenieError.GeniePluginError((oPlugin as GeniePlugin.Plugins.IPlugin), "ParseText", ex);
                        (oPlugin as GeniePlugin.Plugins.IPlugin).Enabled = false;
                        /* TODO ERROR: Skipped ElseDirectiveTrivia *//* TODO ERROR: Skipped DisabledTextTrivia *//* TODO ERROR: Skipped EndIfDirectiveTrivia */
                    }
                }
            }
        }

        return sText;
    }
    public static Form FormResource(string resourceName, bool createifnotopen = false,bool show = false)
    {
        // To find a form by its name (assuming you set the Name property in the designer)
        Form specificForm = Application.OpenForms[resourceName];
        if (specificForm == null && createifnotopen)
        {
            // If the form is not open, create a new instance
            specificForm = (Form)Activator.CreateInstance(Type.GetType("GenieClient." + resourceName));
        }

        if (specificForm != null && !specificForm.IsHandleCreated)
        {
            // If the form is already open but not created, ensure it is shown
            if (show) specificForm.Show();
        }
        return specificForm;
    }
        public static object CreateForm(string formType)
    {
        // Create a new instance of the form if it is not already open
        Form specificForm = Application.OpenForms[formType];
        if (specificForm == null)
        {
            specificForm = (Form)Activator.CreateInstance(Type.GetType(formType));
            specificForm.Show();
        }
        return specificForm;
    }
    public Font MonoFont
    {
        get
        {
            return m_oMonoFont;
        }

        set
        {
            m_oMonoFont = value;
            ConfigChanged?.Invoke(ConfigFieldUpdated.MonoFont);
        }
    }

    public Font InputFont
    {
        get
        {
            return m_oInputFont;
        }

        set
        {
            m_oInputFont = value;
            ConfigChanged?.Invoke(ConfigFieldUpdated.InputFont);
        }
    }
        public Font m_oMonoFont = new Font("Courier New", 9, FontStyle.Regular);
    public Font m_oInputFont = new Font("Courier New", 9, FontStyle.Regular);



                var oStreamWriter = new StreamWriter(sFileName, false);
            oStreamWriter.WriteLine("#config {alwaysontop} {" + AlwaysOnTop + "}");
            oStreamWriter.WriteLine("#config {classicconnect} {" + bClassicConnect + "}");
            oStreamWriter.WriteLine("#config {scriptchar} {" + ScriptChar + "}");
            oStreamWriter.WriteLine("#config {separatorchar} {" + cSeparatorChar + "}");
            oStreamWriter.WriteLine("#config {commandchar} {" + cCommandChar + "}");
            oStreamWriter.WriteLine("#config {mycommandchar} {" + cMyCommandChar + "}");
            oStreamWriter.WriteLine("#config {triggeroninput} {" + bTriggerOnInput.ToString() + "}");
            oStreamWriter.WriteLine("#config {maxrowbuffer} {" + iBufferLineSize + "}");
            oStreamWriter.WriteLine("#config {spelltimer} {" + bShowSpellTimer + "}");
            oStreamWriter.WriteLine("#config {autolog} {" + bAutoLog + "}");
            oStreamWriter.WriteLine("#config {automapper} {" + bAutoMapper + "}");
            oStreamWriter.WriteLine("#config {automapperalpha} {" + AutoMapperAlpha + "}");
            oStreamWriter.WriteLine("#config {editor} {" + sEditor + "}");
            oStreamWriter.WriteLine("#config {prompt} {" + sPrompt + "}");
            oStreamWriter.WriteLine("#config {promptbreak} {" + PromptBreak + "}");
            oStreamWriter.WriteLine("#config {promptforce} {" + PromptForce + "}");
            oStreamWriter.WriteLine("#config {condensed} {" + Condensed + "}");
            oStreamWriter.WriteLine("#config {monstercountignorelist} {" + sIgnoreMonsterList + "}");
            oStreamWriter.WriteLine("#config {scripttimeout} {" + iScriptTimeout + "}");
            oStreamWriter.WriteLine("#config {maxgosubdepth} {" + iMaxGoSubDepth + "}");
            oStreamWriter.WriteLine("#config {ignorescriptwarnings} {" + bIgnoreScriptWarnings + "}");
            oStreamWriter.WriteLine("#config {roundtimeoffset} {" + dRTOffset + "}");
            oStreamWriter.WriteLine("#config {artdir} {" + sArtDir + "}");
            oStreamWriter.WriteLine("#config {artrepo} {" + ArtRepo + "}");
            oStreamWriter.WriteLine("#config {scriptdir} {" + sScriptDir + "}");
            oStreamWriter.WriteLine("#config {scriptrepo} {" + ScriptRepo + "}");
            oStreamWriter.WriteLine("#config {sounddir} {" + SoundDir + "}");
            oStreamWriter.WriteLine("#config {mapdir} {" + sMapDir + "}");
            oStreamWriter.WriteLine("#config {maprepo} {" + MapRepo + "}");
            oStreamWriter.WriteLine("#config {plugindir} {" + sPluginDir + "}");
            oStreamWriter.WriteLine("#config {pluginrepo} {" + PluginRepo + "}");
            oStreamWriter.WriteLine("#config {configdir} {" + sConfigDir + "}");
            oStreamWriter.WriteLine("#config {logdir} {" + sLogDir + "}");
            oStreamWriter.WriteLine("#config {updatemapperscripts} {" + UpdateMapperScripts.ToString() + "}");
            oStreamWriter.WriteLine("#config {reconnect} {" + bReconnect + "}");
            oStreamWriter.WriteLine("#config {ignoreclosealert} {" + bIgnoreCloseAlert + "}");
            oStreamWriter.WriteLine("#config {keepinputtext} {" + bKeepInput + "}");
            oStreamWriter.WriteLine("#config {sizeinputtogame} {" + SizeInputToGame + "}");
            oStreamWriter.WriteLine("#config {muted} {" + !bPlaySounds + "}");
            oStreamWriter.WriteLine("#config {abortdupescript} {" + bAbortDupeScript + "}");
            oStreamWriter.WriteLine("#config {parsegameonly} {" + bParseGameOnly + "}");
            oStreamWriter.WriteLine("#config {connectstring} {" + sConnectString + "}");
            oStreamWriter.WriteLine("#config {servertimeout} {" + iServerActivityTimeout + "}");
            oStreamWriter.WriteLine("#config {servertimeoutcommand} {" + sServerActivityCommand + "}");
            oStreamWriter.WriteLine("#config {usertimeout} {" + iUserActivityTimeout + "}");
            oStreamWriter.WriteLine("#config {usertimeoutcommand} {" + sUserActivityCommand + "}");
            oStreamWriter.WriteLine("#config {showlinks} {" + bShowLinks + "}");
            oStreamWriter.WriteLine("#config {showimages} {" + bShowImages + "}");
            oStreamWriter.WriteLine("#config {weblinksafety} {" + bWebLinkSafety + "}");
            oStreamWriter.WriteLine($"#config {{rubypath}} {{{RubyPath}}}");
            oStreamWriter.WriteLine($"#config {{cmdpath}} {{{CmdPath}}}");
            oStreamWriter.WriteLine($"#config {{lichpath}} {{{LichPath}}}");
            oStreamWriter.WriteLine($"#config {{licharguments}} {{{LichArguments}}}");
            oStreamWriter.WriteLine($"#config {{lichserver}} {{{LichServer}}}");
            oStreamWriter.WriteLine($"#config {{lichport}} {{{LichPort}}}");
            oStreamWriter.WriteLine($"#config {{lichstartpause}} {{{LichStartPause}}}");
            oStreamWriter.WriteLine($"#config {{connectscript}} {{{ConnectScript}}}");
            oStreamWriter.WriteLine($"#config {{autoupdate}} {{{AutoUpdate}}}");
            oStreamWriter.WriteLine($"#config {{autoupdatelamp}} {{{AutoUpdateLamp}}}");
            oStreamWriter.WriteLine($"#config {{checkforupdates}} {{{CheckForUpdates}}}");
            oStreamWriter.WriteLine($"#config {{scriptextension}} {{{ScriptExtension}}}");
            oStreamWriter.Close();
            return true;
